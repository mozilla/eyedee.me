#!/usr/bin/env node

// require libraries that we depend on
const
express = require('express'),
url = require('url'),
path = require('path'),
crypto = require('../lib/crypto'),
wsapi = require('../lib/wsapi.js'),
cookieSessions = require("client-sessions"),
db = require('../lib/db.js'),
ejs = require('ejs'),
fs = require('fs'),
urlparse = require('urlparse'),
connect_fonts = require('connect-fonts'),
font_pack_lora = require('connect-fonts-lora'),
font_pack_opensans = require('connect-fonts-opensans');

// the key with which session cookies are encrypted
const COOKIE_SECRET = process.env.SEKRET || 'super sekret sekret';

// The IP Address to listen on.
const IP_ADDRESS = process.env.IP_ADDRESS || '127.0.0.1';

// The port to listen to.
const PORT = process.env.PORT || 0;

// localHostname is the address to which we bind.  It will be used
// as our external address ('audience' to which assertions will be set)
// if no 'Host' header is present on incoming login requests.
var localHostname = undefined;

// create a webserver using the express framework
var app = express.createServer();

// let's install a handler for '/__heartbeat__' which monitoring software can
// use (hit before logging)
app.use(function(req, res, next) {
  if (req.method === 'GET' && req.path === '/__heartbeat__') {
    res.writeHead(200);
    res.write('ok');
    res.end();
  } else {
    return next();
  }
});

// do some logging
app.use(express.logger({ format: 'dev' }));

// parse post bodies
app.use(express.bodyParser());

// encrypted cookie based session support, using
// https://github.com/benadida/node-client-sessions
app.use(cookieSessions({
  cookieName: 'eyedeeme_auth',
  secret: COOKIE_SECRET,
  cookie: {
    path: '/api/',
    maxAge: (6 * 60 * 60 * 1000)
  }
}));

// use ejs for template rendering
const VIEW_PATH = path.join(__dirname, "..", "views");
app.set('view engine', 'ejs');
app.register('.html', require('ejs'));
app.set("views", VIEW_PATH);

// generate the "declaration of support".  we'll basically write a static file that the
// static handler (below) will be able to serve up.
console.log('generating declaration of support');
const WELL_KNOWN_PATH = path.join(__dirname, "..", "static", ".well-known");
ejs.renderFile(path.join(VIEW_PATH, 'browserid.ejs'), {
  layout: false,
  pubKey: crypto.pubKey
}, function(err, r) {
  if (err) throw err;
  try { fs.mkdirSync(WELL_KNOWN_PATH); } catch(e) {}
  var p = path.join(WELL_KNOWN_PATH, "browserid");
  try { fs.unlinkSync(p); } catch(e) {}
  fs.writeFileSync(p, r);
});

var pp = require('postprocess')(function(req, buf) {
  var re = new RegExp('https://browserid.org', 'g');
  return buf.replace(re, req.persona_url);
});

// because there are several different browserid environments (dev,
// beta, production), we want all of them to be able to test against
// browserid.  To accomplish this, we'll dynamically replace the
// back-references to browserid in provision.html and sign_in.html with the
// requesting server, provided referrer headers are present that we trust.
const STATIC_BASE_PATH = path.join(__dirname, "..", "static");
const SUB_PATHS = [
  '/browserid/provision.html', '/browserid/sign_in.html'
];

app.use(function(req, res, next) {
  if (SUB_PATHS.indexOf(req.path) !== -1) {
    // what URL shall we sub in?
    var bid_url = 'https://browserid.org';
    if (process.env['BROWSERID_URL']) bid_url = process.env['BROWSERID_URL'];
    else if (req.headers['referer']) {
      var them = urlparse(req.headers['referer']).originOnly().toString();
      console.log(req.headers);
      console.log("them:", them);
      if ([ 'https://dev.diresworb.org', 'https://diresworb.org', 'http://127.0.0.1:10002' ].indexOf(them) != -1 ||
          /https:\/\/[a-z][a-z0-9\-_]*\.personatest\.org/.test(them))
      {
        bid_url = them;
      }
      // for our new urls, explicitly hack things so we intentially pull include.js from *old* urls,
      // this is to ensure we don't break existing sites
      else if (them === 'https://login.dev.anosrep.org') {
        bid_url = 'https://dev.diresworb.org';
      }
      else if (them === 'https://login.anosrep.org') {
        bid_url = 'https://diresworb.org';
      }
      else if (them === 'https://login.persona.org') {
        bid_url = 'https://browserid.org';
      }
      else if (them === 'https://firefoxos.anosrep.org') {
        bid_url = 'https://login.anosrep.org';
      }
      else if (them === 'https://firefoxos.persona.org') {
        bid_url = 'https://login.persona.org';
      }
    }

    req.persona_url = bid_url;

    res.setHeader('Cache-Control', 'no-store');
    res.setHeader('Content-Type', 'text/html');

    pp(req, res, next); 
  } else {
    next();
  }
});

// now ensure that declaration of support is served with 'application/json'
app.use(function(req, res, next) {
  if (req.path === '/.well-known/browserid') {
    res.setHeader('Content-Type', 'application/json');
  }
  next();
});

wsapi.register(app);

app.use(connect_fonts.setup({
  fonts: [ font_pack_lora, font_pack_opensans ],
  allow_origin: "https://eyedee.me",
  ua: "all",
  maxage: 180 * 24 * 60 * 60 * 1000   // 180 days
}));

// Tell express from where it should serve static resources
app.use(express.static(path.join(path.dirname(__dirname), "static")));

// connect to the database
db.connect(function(err) {
  if (err) {
    console.log("error connecting to database:", err);
    process.exit(1);
  }

  // start listening for connections
  app.listen(PORT, IP_ADDRESS, function () {
    var address = app.address();
    localHostname = address.address + ':' + address.port
    console.log("listening on " + localHostname);
  });
});
